"""
This type stub file was generated by pyright.
"""

import atexit
from itertools import chain
from functools import wraps
from typing import overload

from ._ta_lib import MA_Type, __TA_FUNCTION_NAMES__, __ta_version__, _ta_get_compatibility as get_compatibility, _ta_get_unstable_period as get_unstable_period, _ta_initialize, _ta_set_compatibility as set_compatibility, _ta_set_unstable_period as set_unstable_period, _ta_shutdown

if _pl_Series is not None or _pd_Series is not None:
  ...
else:
  _wrapper = ...
func = ...
stream_func_names = ...
stream = ...
__version__ = ...
__function_groups__ = ...
def get_functions(): # -> list[Unknown]:
  """
    Returns a list of all the functions supported by TALIB
    """
  ...

def get_function_groups(): # -> dict[str, list[str]]:
  """
    Returns a dict with keys of function-group names and values of lists
    of function names ie {'group_names': ['function_names']}
    """
  ...

__all__ = ['get_functions', 'get_function_groups'] + __TA_FUNCTION_NAMES__ + ["stream_%s" % name for name in __TA_FUNCTION_NAMES__]

import polars as pl
import pandas as pd
import numpy as np



@overload
def BBANDS(close: pl.Series, timeperiod: int = ..., nbdevup: float = ..., nbdevdn: float = ..., matype: int = ...) -> tuple[pl.Series, pl.Series, pl.Series]: ...
@overload
def BBANDS(close: pd.Series, timeperiod: int = ..., nbdevup: float = ..., nbdevdn: float = ..., matype: int = ...) -> tuple[pd.Series, pd.Series, pd.Series]: ...
@overload
def BBANDS(close: np.ndarray, timeperiod: int = ..., nbdevup: float = ..., nbdevdn: float = ..., matype: int = ...) -> tuple[np.ndarray, np.ndarray, np.ndarray]: ...

@overload
def WMA(close: pl.Series, timeperiod: int = ...) -> pl.Series: ...
@overload
def WMA(close: pd.Series, timeperiod: int = ...) -> pd.Series: ...
@overload
def WMA(close: np.ndarray, timeperiod: int = ...) -> np.ndarray: ...

@overload
def TRIX(close: pl.Series, timeperiod: int = ...) -> pl.Series: ...
@overload
def TRIX(close: pd.Series, timeperiod: int = ...) -> pd.Series: ...
@overload
def TRIX(close: np.ndarray, timeperiod: int = ...) -> np.ndarray: ...

@overload
def HT_TRENDLINE(close: pl.Series) -> pl.Series: ...
@overload
def HT_TRENDLINE(close: pd.Series) -> pd.Series: ...
@overload
def HT_TRENDLINE(close: np.ndarray) -> np.ndarray: ...

@overload
def TRIMA(close: pl.Series, timeperiod: int = ...) -> pl.Series: ...
@overload
def TRIMA(close: pd.Series, timeperiod: int = ...) -> pd.Series: ...
@overload
def TRIMA(close: np.ndarray, timeperiod: int = ...) -> np.ndarray: ...

@overload
def HT_DCPERIOD(close: pl.Series) -> pl.Series: ...
@overload
def HT_DCPERIOD(close: pd.Series) -> pd.Series: ...
@overload
def HT_DCPERIOD(close: np.ndarray) -> np.ndarray: ...

@overload
def HT_DCPHASE(close: pl.Series) -> pl.Series: ...
@overload
def HT_DCPHASE(close: pd.Series) -> pd.Series: ...
@overload
def HT_DCPHASE(close: np.ndarray) -> np.ndarray: ...

@overload
def HT_PHASOR(close: pl.Series) -> tuple[pl.Series, pl.Series]: ...
@overload
def HT_PHASOR(close: pd.Series) -> tuple[pd.Series, pd.Series]: ...
@overload
def HT_PHASOR(close: np.ndarray) -> tuple[np.ndarray, np.ndarray]: ...

@overload
def HT_SINE(close: pl.Series) -> tuple[pl.Series, pl.Series]: ...
@overload
def HT_SINE(close: pd.Series) -> tuple[pd.Series, pd.Series]: ...
@overload
def HT_SINE(close: np.ndarray) -> tuple[np.ndarray, np.ndarray]: ...

@overload
def TEMA(close: pl.Series, timeperiod: int = ...) -> pl.Series: ...
@overload
def TEMA(close: pd.Series, timeperiod: int = ...) -> pd.Series: ...
@overload
def TEMA(close: np.ndarray, timeperiod: int = ...) -> np.ndarray: ...

@overload
def T3(close: pl.Series, timeperiod: int = ..., vfactor: float = ...) -> pl.Series: ...
@overload
def T3(close: pd.Series, timeperiod: int = ..., vfactor: float = ...) -> pd.Series: ...
@overload
def T3(close: np.ndarray, timeperiod: int = ..., vfactor: float = ...) -> np.ndarray: ...

@overload
def STOCHF(high: pl.Series, low: pl.Series, close: pl.Series, fastk_period: int = ..., fastd_period: int = ..., fastd_matype: int = ...) -> tuple[pl.Series, pl.Series]: ...
@overload
def STOCHF(high: pd.Series, low: pd.Series, close: pd.Series, fastk_period: int = ..., fastd_period: int = ..., fastd_matype: int = ...) -> tuple[pd.Series, pd.Series]: ...
@overload
def STOCHF(high: np.ndarray, low: np.ndarray, close: np.ndarray, fastk_period: int = ..., fastd_period: int = ..., fastd_matype: int = ...) -> tuple[np.ndarray, np.ndarray]: ...

@overload
def STOCHRSI(close: pl.Series, timeperiod: int = ..., fastk_period: int = ..., fastd_period: int = ..., fastd_matype: int = ...) -> tuple[pl.Series, pl.Series]: ...
@overload
def STOCHRSI(close: pd.Series, timeperiod: int = ..., fastk_period: int = ..., fastd_period: int = ..., fastd_matype: int = ...) -> tuple[pd.Series, pd.Series]: ...
@overload
def STOCHRSI(close: np.ndarray, timeperiod: int = ..., fastk_period: int = ..., fastd_period: int = ..., fastd_matype: int = ...) -> tuple[np.ndarray, np.ndarray]: ...

@overload
def STOCH(high: pl.Series, low: pl.Series, close: pl.Series, fastk_period: int = ..., slowk_period: int = ..., slowk_matype: int = ..., slowd_period: int = ..., slowd_matype: int = ...) -> tuple[pl.Series, pl.Series]: ...
@overload
def STOCH(high: pd.Series, low: pd.Series, close: pd.Series, fastk_period: int = ..., slowk_period: int = ..., slowk_matype: int = ..., slowd_period: int = ..., slowd_matype: int = ...) -> tuple[pd.Series, pd.Series]: ...
@overload
def STOCH(high: np.ndarray, low: np.ndarray, close: np.ndarray, fastk_period: int = ..., slowk_period: int = ..., slowk_matype: int = ..., slowd_period: int = ..., slowd_matype: int = ...) -> tuple[np.ndarray, np.ndarray]: ...

@overload
def RSI(close: pl.Series, timeperiod: int = ...) -> pl.Series: ...
@overload
def RSI(close: pd.Series, timeperiod: int = ...) -> pd.Series: ...
@overload
def RSI(close: np.ndarray, timeperiod: int = ...) -> np.ndarray: ...

@overload
def PPO(close: pl.Series, fastperiod: int = ..., slowperiod: int = ..., matype: int = ...) -> pl.Series: ...
@overload
def PPO(close: pd.Series, fastperiod: int = ..., slowperiod: int = ..., matype: int = ...) -> pd.Series: ...
@overload
def PPO(close: np.ndarray, fastperiod: int = ..., slowperiod: int = ..., matype: int = ...) -> np.ndarray: ...

@overload
def MACD(close: pl.Series, fastperiod: int = ..., slowperiod: int = ..., signalperiod: int = ...) -> tuple[pl.Series, pl.Series, pl.Series]: ...
@overload
def MACD(close: pd.Series, fastperiod: int = ..., slowperiod: int = ..., signalperiod: int = ...) -> tuple[pd.Series, pd.Series, pd.Series]: ...
@overload
def MACD(close: np.ndarray, fastperiod: int = ..., slowperiod: int = ..., signalperiod: int = ...) -> tuple[np.ndarray, np.ndarray, np.ndarray]: ...

@overload
def MACDEXT(close: pl.Series, fastperiod: int = ..., fastmatype: int = ..., slowperiod: int = ..., slowmatype: int = ..., signalperiod: int = ..., signalmatype: int = ...) -> tuple[pl.Series, pl.Series, pl.Series]: ...
@overload
def MACDEXT(close: pd.Series, fastperiod: int = ..., fastmatype: int = ..., slowperiod: int = ..., slowmatype: int = ..., signalperiod: int = ..., signalmatype: int = ...) -> tuple[pd.Series, pd.Series, pd.Series]: ...
@overload
def MACDEXT(close: np.ndarray, fastperiod: int = ..., fastmatype: int = ..., slowperiod: int = ..., slowmatype: int = ..., signalperiod: int = ..., signalmatype: int = ...) -> tuple[np.ndarray, np.ndarray, np.ndarray]: ...

@overload
def MACDFIX(close: pl.Series, signalperiod: int = ...) -> tuple[pl.Series, pl.Series, pl.Series]: ...
@overload
def MACDFIX(close: pd.Series, signalperiod: int = ...) -> tuple[pd.Series, pd.Series, pd.Series]: ...
@overload
def MACDFIX(close: np.ndarray, signalperiod: int = ...) -> tuple[np.ndarray, np.ndarray, np.ndarray]: ...

@overload
def MOM(close: pl.Series, timeperiod: int = ...) -> pl.Series: ...
@overload
def MOM(close: pd.Series, timeperiod: int = ...) -> pd.Series: ...
@overload
def MOM(close: np.ndarray, timeperiod: int = ...) -> np.ndarray: ...

@overload
def MINUS_DI(high: pl.Series, low: pl.Series, close: pl.Series, timeperiod: int = ...) -> pl.Series: ...
@overload
def MINUS_DI(high: pd.Series, low: pd.Series, close: pd.Series, timeperiod: int = ...) -> pd.Series: ...
@overload
def MINUS_DI(high: np.ndarray, low: np.ndarray, close: np.ndarray, timeperiod: int = ...) -> np.ndarray: ...

@overload
def MINUS_DM(low: pl.Series, high: pl.Series, timeperiod: int = ...) -> pl.Series: ...
@overload
def MINUS_DM(low: pd.Series, high: pd.Series, timeperiod: int = ...) -> pd.Series: ...
@overload
def MINUS_DM(low: np.ndarray, high: np.ndarray, timeperiod: int = ...) -> np.ndarray: ...

@overload
def MFI(high: pl.Series, low: pl.Series, close: pl.Series, volume: pl.Series, timeperiod: int = ...) -> pl.Series: ...
@overload
def MFI(high: pd.Series, low: pd.Series, close: pd.Series, volume: pd.Series, timeperiod: int = ...) -> pd.Series: ...
@overload
def MFI(high: np.ndarray, low: np.ndarray, close: np.ndarray, volume: np.ndarray, timeperiod: int = ...) -> np.ndarray: ...

@overload
def MA(close: pl.Series, timeperiod: int = ..., matype: int = ...) -> pl.Series: ...
@overload
def MA(close: pd.Series, timeperiod: int = ..., matype: int = ...) -> pd.Series: ...
@overload
def MA(close: np.ndarray, timeperiod: int = ..., matype: int = ...) -> np.ndarray: ...

@overload
def KAMA(close: pl.Series, timeperiod: int = ...) -> pl.Series: ...
@overload
def KAMA(close: pd.Series, timeperiod: int = ...) -> pd.Series: ...
@overload
def KAMA(close: np.ndarray, timeperiod: int = ...) -> np.ndarray: ...

@overload
def MIDPOINT(close: pl.Series, timeperiod: int = ...) -> pl.Series: ...
@overload
def MIDPOINT(close: pd.Series, timeperiod: int = ...) -> pd.Series: ...
@overload
def MIDPOINT(close: np.ndarray, timeperiod: int = ...) -> np.ndarray: ...

@overload
def MIDPRICE(high: pl.Series, low: pl.Series, timeperiod: int = ...) -> pl.Series: ...
@overload
def MIDPRICE(high: pd.Series, low: pd.Series, timeperiod: int = ...) -> pd.Series: ...
@overload
def MIDPRICE(high: np.ndarray, low: np.ndarray, timeperiod: int = ...) -> np.ndarray: ...

@overload
def SAR(high: pl.Series, low: pl.Series, acceleration: float = ..., maximum: float = ...) -> pl.Series: ...
@overload
def SAR(high: pd.Series, low: pd.Series, acceleration: float = ..., maximum: float = ...) -> pd.Series: ...
@overload
def SAR(high: np.ndarray, low: np.ndarray, acceleration: float = ..., maximum: float = ...) -> np.ndarray: ...

@overload
def SAREXT(high: pl.Series, low: pl.Series, startvalue: float = ..., offsetonreverse: float = ..., accelerationinitlong: float = ..., accelerationlong: float = ..., accelerationmaxlong: float = ..., accelerationinitshort: float = ..., accelerationshort: float = ..., accelerationmaxshort: float = ...) -> pl.Series: ...
@overload
def SAREXT(high: pd.Series, low: pd.Series, startvalue: float = ..., offsetonreverse: float = ..., accelerationinitlong: float = ..., accelerationlong: float = ..., accelerationmaxlong: float = ..., accelerationinitshort: float = ..., accelerationshort: float = ..., accelerationmaxshort: float = ...) -> pd.Series: ...
@overload
def SAREXT(high: np.ndarray, low: np.ndarray, startvalue: float = ..., offsetonreverse: float = ..., accelerationinitlong: float = ..., accelerationlong: float = ..., accelerationmaxlong: float = ..., accelerationinitshort: float = ..., accelerationshort: float = ..., accelerationmaxshort: float = ...) -> np.ndarray: ...

@overload
def SMA(close: pl.Series, timeperiod: int = ...) -> pl.Series: ...
@overload
def SMA(close: pd.Series, timeperiod: int = ...) -> pd.Series: ...
@overload
def SMA(close: np.ndarray, timeperiod: int = ...) -> np.ndarray: ...

@overload
def STDDEV(close: pl.Series, timeperiod: int = ..., nbdev: float = ...) -> pl.Series: ...
@overload
def STDDEV(close: pd.Series, timeperiod: int = ..., nbdev: float = ...) -> pd.Series: ...
@overload
def STDDEV(close: np.ndarray, timeperiod: int = ..., nbdev: float = ...) -> np.ndarray: ...

@overload
def MAMA(close: pl.Series, fastlimit: float = ..., slowlimit: float = ...) -> tuple[pl.Series, pl.Series]: ...
@overload
def MAMA(close: pd.Series, fastlimit: float = ..., slowlimit: float = ...) -> tuple[pd.Series, pd.Series]: ...
@overload
def MAMA(close: np.ndarray, fastlimit: float = ..., slowlimit: float = ...) -> tuple[np.ndarray, np.ndarray]: ...

@overload
def EMA(close: pl.Series, timeperiod: int = ...) -> pl.Series: ...
@overload
def EMA(close: pd.Series, timeperiod: int = ...) -> pd.Series: ...
@overload
def EMA(close: np.ndarray, timeperiod: int = ...) -> np.ndarray: ...

@overload
def DEMA(close: pl.Series, timeperiod: int = ...) -> pl.Series: ...
@overload
def DEMA(close: pd.Series, timeperiod: int = ...) -> pd.Series: ...
@overload
def DEMA(close: np.ndarray, timeperiod: int = ...) -> np.ndarray: ...

@overload
def DX(high: pl.Series, low: pl.Series, close: pl.Series, timeperiod: int = ...) -> pl.Series: ...
@overload
def DX(high: pd.Series, low: pd.Series, close: pd.Series, timeperiod: int = ...) -> pd.Series: ...
@overload
def DX(high: np.ndarray, low: np.ndarray, close: np.ndarray, timeperiod: int = ...) -> np.ndarray: ...

@overload
def ADX(high: pl.Series, low: pl.Series, close: pl.Series, timeperiod: int = ...) -> pl.Series: ...
@overload
def ADX(high: pd.Series, low: pd.Series, close: pd.Series, timeperiod: int = ...) -> pd.Series: ...
@overload
def ADX(high: np.ndarray, low: np.ndarray, close: np.ndarray, timeperiod: int = ...) -> np.ndarray: ...

@overload
def ADXR(high: pl.Series, low: pl.Series, close: pl.Series, timeperiod: int = ...) -> pl.Series: ...
@overload
def ADXR(high: pd.Series, low: pd.Series, close: pd.Series, timeperiod: int = ...) -> pd.Series: ...
@overload
def ADXR(high: np.ndarray, low: np.ndarray, close: np.ndarray, timeperiod: int = ...) -> np.ndarray: ...

@overload
def APO(close: pl.Series, fastperiod: int = ..., slowperiod: int = ..., matype: int = ...) -> pl.Series: ...
@overload
def APO(close: pd.Series, fastperiod: int = ..., slowperiod: int = ..., matype: int = ...) -> pd.Series: ...
@overload
def APO(close: np.ndarray, fastperiod: int = ..., slowperiod: int = ..., matype: int = ...) -> np.ndarray: ...

@overload
def AROON(high: pl.Series, low: pl.Series, timeperiod: int = ...) -> tuple[pl.Series, pl.Series]: ...
@overload
def AROON(high: pd.Series, low: pd.Series, timeperiod: int = ...) -> tuple[pd.Series, pd.Series]: ...
@overload
def AROON(high: np.ndarray, low: np.ndarray, timeperiod: int = ...) -> tuple[np.ndarray, np.ndarray]: ...

@overload
def AROONOSC(high: pl.Series, low: pl.Series, timeperiod: int = ...) -> pl.Series: ...
@overload
def AROONOSC(high: pd.Series, low: pd.Series, timeperiod: int = ...) -> pd.Series: ...
@overload
def AROONOSC(high: np.ndarray, low: np.ndarray, timeperiod: int = ...) -> np.ndarray: ...

@overload
def BETA(high: pl.Series, low: pl.Series, timeperiod: int = ...) -> pl.Series: ...
@overload
def BETA(high: pd.Series, low: pd.Series, timeperiod: int = ...) -> pd.Series: ...
@overload
def BETA(high: np.ndarray, low: np.ndarray, timeperiod: int = ...) -> np.ndarray: ...

@overload
def BOP(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def BOP(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def BOP(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CCI(high: pl.Series, low: pl.Series, close: pl.Series, timeperiod: int = ...) -> pl.Series: ...
@overload
def CCI(high: pd.Series, low: pd.Series, close: pd.Series, timeperiod: int = ...) -> pd.Series: ...
@overload
def CCI(high: np.ndarray, low: np.ndarray, close: np.ndarray, timeperiod: int = ...) -> np.ndarray: ...

@overload
def CMO(close: pl.Series, timeperiod: int = ...) -> pl.Series: ...
@overload
def CMO(close: pd.Series, timeperiod: int = ...) -> pd.Series: ...
@overload
def CMO(close: np.ndarray, timeperiod: int = ...) -> np.ndarray: ...

@overload
def CORREL(high: pl.Series, low: pl.Series, timeperiod: int = ...) -> pl.Series: ...
@overload
def CORREL(high: pd.Series, low: pd.Series, timeperiod: int = ...) -> pd.Series: ...
@overload
def CORREL(high: np.ndarray, low: np.ndarray, timeperiod: int = ...) -> np.ndarray: ...

@overload
def CDL2CROWS(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDL2CROWS(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDL2CROWS(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDL3BLACKCROWS(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDL3BLACKCROWS(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDL3BLACKCROWS(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDL3INSIDE(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDL3INSIDE(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDL3INSIDE(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDL3LINESTRIKE(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDL3LINESTRIKE(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDL3LINESTRIKE(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDL3OUTSIDE(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDL3OUTSIDE(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDL3OUTSIDE(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDL3STARSINSOUTH(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDL3STARSINSOUTH(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDL3STARSINSOUTH(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDL3WHITESOLDIERS(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDL3WHITESOLDIERS(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDL3WHITESOLDIERS(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLABANDONEDBABY(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series, penetration: float = ...) -> pl.Series: ...
@overload
def CDLABANDONEDBABY(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series, penetration: float = ...) -> pd.Series: ...
@overload
def CDLABANDONEDBABY(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray, penetration: float = ...) -> np.ndarray: ...

@overload
def CDLADVANCEBLOCK(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLADVANCEBLOCK(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLADVANCEBLOCK(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLBELTHOLD(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLBELTHOLD(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLBELTHOLD(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLBREAKAWAY(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLBREAKAWAY(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLBREAKAWAY(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLCLOSINGMARUBOZU(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLCLOSINGMARUBOZU(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLCLOSINGMARUBOZU(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLCONCEALBABYSWALL(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLCONCEALBABYSWALL(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLCONCEALBABYSWALL(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLCOUNTERATTACK(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLCOUNTERATTACK(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLCOUNTERATTACK(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLDARKCLOUDCOVER(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series, penetration: float = ...) -> pl.Series: ...
@overload
def CDLDARKCLOUDCOVER(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series, penetration: float = ...) -> pd.Series: ...
@overload
def CDLDARKCLOUDCOVER(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray, penetration: float = ...) -> np.ndarray: ...

@overload
def CDLDOJI(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLDOJI(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLDOJI(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLDOJISTAR(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLDOJISTAR(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLDOJISTAR(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLDRAGONFLYDOJI(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLDRAGONFLYDOJI(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLDRAGONFLYDOJI(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLENGULFING(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLENGULFING(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLENGULFING(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLEVENINGDOJISTAR(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series, penetration: float = ...) -> pl.Series: ...
@overload
def CDLEVENINGDOJISTAR(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series, penetration: float = ...) -> pd.Series: ...
@overload
def CDLEVENINGDOJISTAR(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray, penetration: float = ...) -> np.ndarray: ...

@overload
def CDLEVENINGSTAR(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series, penetration: float = ...) -> pl.Series: ...
@overload
def CDLEVENINGSTAR(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series, penetration: float = ...) -> pd.Series: ...
@overload
def CDLEVENINGSTAR(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray, penetration: float = ...) -> np.ndarray: ...

@overload
def CDLGAPSIDESIDEWHITE(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLGAPSIDESIDEWHITE(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLGAPSIDESIDEWHITE(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLGRAVESTONEDOJI(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLGRAVESTONEDOJI(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLGRAVESTONEDOJI(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLHAMMER(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLHAMMER(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLHAMMER(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLHANGINGMAN(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLHANGINGMAN(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLHANGINGMAN(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLHARAMI(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLHARAMI(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLHARAMI(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLHARAMICROSS(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLHARAMICROSS(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLHARAMICROSS(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLHIGHWAVE(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLHIGHWAVE(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLHIGHWAVE(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLHIKKAKE(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLHIKKAKE(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLHIKKAKE(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLHIKKAKEMOD(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLHIKKAKEMOD(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLHIKKAKEMOD(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLHOMINGPIGEON(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLHOMINGPIGEON(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLHOMINGPIGEON(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLIDENTICAL3CROWS(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLIDENTICAL3CROWS(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLIDENTICAL3CROWS(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLINNECK(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLINNECK(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLINNECK(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLINVERTEDHAMMER(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLINVERTEDHAMMER(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLINVERTEDHAMMER(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLKICKING(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLKICKING(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLKICKING(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLKICKINGBYLENGTH(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLKICKINGBYLENGTH(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLKICKINGBYLENGTH(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLLADDERBOTTOM(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLLADDERBOTTOM(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLLADDERBOTTOM(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLLONGLEGGEDDOJI(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLLONGLEGGEDDOJI(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLLONGLEGGEDDOJI(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLLONGLINE(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLLONGLINE(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLLONGLINE(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLMARUBOZU(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLMARUBOZU(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLMARUBOZU(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLMATCHINGLOW(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLMATCHINGLOW(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLMATCHINGLOW(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLMATHOLD(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series, penetration: float = 0) -> pl.Series: ...
@overload
def CDLMATHOLD(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series, penetration: float = 0) -> pd.Series: ...
@overload
def CDLMATHOLD(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray, penetration: float = 0) -> np.ndarray: ...

@overload
def CDLMORNINGDOJISTAR(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series, penetration: float = 0) -> pl.Series: ...
@overload
def CDLMORNINGDOJISTAR(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series, penetration: float = 0) -> pd.Series: ...
@overload
def CDLMORNINGDOJISTAR(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray, penetration: float = 0) -> np.ndarray: ...

@overload
def CDLMORNINGSTAR(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series, penetration: float = 0) -> pl.Series: ...
@overload
def CDLMORNINGSTAR(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series, penetration: float = 0) -> pd.Series: ...
@overload
def CDLMORNINGSTAR(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray, penetration: float = 0) -> np.ndarray: ...

@overload
def CDLONNECK(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLONNECK(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLONNECK(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLPIERCING(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLPIERCING(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLPIERCING(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLRICKSHAWMAN(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLRICKSHAWMAN(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLRICKSHAWMAN(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLRISEFALL3METHODS(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLRISEFALL3METHODS(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLRISEFALL3METHODS(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLSEPARATINGLINES(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLSEPARATINGLINES(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLSEPARATINGLINES(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLSHOOTINGSTAR(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLSHOOTINGSTAR(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLSHOOTINGSTAR(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLSHORTLINE(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLSHORTLINE(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLSHORTLINE(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLSPINNINGTOP(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLSPINNINGTOP(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLSPINNINGTOP(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLSTALLEDPATTERN(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLSTALLEDPATTERN(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLSTALLEDPATTERN(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLSTICKSANDWICH(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLSTICKSANDWICH(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLSTICKSANDWICH(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLTAKURI(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLTAKURI(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLTAKURI(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLTASUKIGAP(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLTASUKIGAP(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLTASUKIGAP(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLTHRUSTING(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLTHRUSTING(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLTHRUSTING(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLTRISTAR(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLTRISTAR(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLTRISTAR(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLUNIQUE3RIVER(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLUNIQUE3RIVER(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLUNIQUE3RIVER(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLUPSIDEGAP2CROWS(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLUPSIDEGAP2CROWS(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLUPSIDEGAP2CROWS(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def CDLXSIDEGAP3METHODS(open: pl.Series, high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def CDLXSIDEGAP3METHODS(open: pd.Series, high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def CDLXSIDEGAP3METHODS(open: np.ndarray, high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def OBV(close: pl.Series, volume: pl.Series) -> pl.Series: ...
@overload
def OBV(close: pd.Series, volume: pd.Series) -> pd.Series: ...
@overload
def OBV(close: np.ndarray, volume: np.ndarray) -> np.ndarray: ...

@overload
def AD(high: pl.Series, low: pl.Series, close: pl.Series, volume: pl.Series) -> pl.Series: ...
@overload
def AD(high: pd.Series, low: pd.Series, close: pd.Series, volume: pd.Series) -> pd.Series: ...
@overload
def AD(high: np.ndarray, low: np.ndarray, close: np.ndarray, volume: np.ndarray) -> np.ndarray: ...

@overload
def ADOSC(high: pl.Series, low: pl.Series, close: pl.Series, volume: pl.Series, fastperiod: int = 3, slowperiod: int = 10) -> pl.Series: ...
@overload
def ADOSC(high: pd.Series, low: pd.Series, close: pd.Series, volume: pd.Series, fastperiod: int = 3, slowperiod: int = 10) -> pd.Series: ...
@overload
def ADOSC(high: np.ndarray, low: np.ndarray, close: np.ndarray, volume: np.ndarray, fastperiod: int = 3, slowperiod: int = 10) -> np.ndarray: ...

@overload
def PLUS_DM(high: pl.Series, low: pl.Series, timeperiod: int = 14) -> pl.Series: ...
@overload
def PLUS_DM(high: pd.Series, low: pd.Series, timeperiod: int = 14) -> pd.Series: ...
@overload
def PLUS_DM(high: np.ndarray, low: np.ndarray, timeperiod: int = 14) -> np.ndarray: ...

@overload
def ATR(high: pl.Series, low: pl.Series, close: pl.Series, timeperiod: int = 14) -> pl.Series: ...
@overload
def ATR(high: pd.Series, low: pd.Series, close: pd.Series, timeperiod: int = 14) -> pd.Series: ...
@overload
def ATR(high: np.ndarray, low: np.ndarray, close: np.ndarray, timeperiod: int = 14) -> np.ndarray: ...

@overload
def HT_TRENDMODE(close: pl.Series) -> pl.Series: ...
@overload
def HT_TRENDMODE(close: pd.Series) -> pd.Series: ...
@overload
def HT_TRENDMODE(close: np.ndarray) -> np.ndarray: ...

@overload
def WILLR(high: pl.Series, low: pl.Series, close: pl.Series, timeperiod: int = 14) -> pl.Series: ...
@overload
def WILLR(high: pd.Series, low: pd.Series, close: pd.Series, timeperiod: int = 14) -> pd.Series: ...
@overload
def WILLR(high: np.ndarray, low: np.ndarray, close: np.ndarray, timeperiod: int = 14) -> np.ndarray: ...

@overload
def TRANGE(high: pl.Series, low: pl.Series, close: pl.Series) -> pl.Series: ...
@overload
def TRANGE(high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series: ...
@overload
def TRANGE(high: np.ndarray, low: np.ndarray, close: np.ndarray) -> np.ndarray: ...

@overload
def PLUS_DI(high: pl.Series, low: pl.Series, close: pl.Series, timeperiod: int = 14) -> pl.Series: ...
@overload
def PLUS_DI(high: pd.Series, low: pd.Series, close: pd.Series, timeperiod: int = 14) -> pd.Series: ...
@overload
def PLUS_DI(high: np.ndarray, low: np.ndarray, close: np.ndarray, timeperiod: int = 14) -> np.ndarray: ...

@overload
def NATR(high: pl.Series, low: pl.Series, close: pl.Series, timeperiod: int = 14) -> pl.Series: ...
@overload
def NATR(high: pd.Series, low: pd.Series, close: pd.Series, timeperiod: int = 14) -> pd.Series: ...
@overload
def NATR(high: np.ndarray, low: np.ndarray, close: np.ndarray, timeperiod: int = 14) -> np.ndarray: ...

@overload
def ULTOSC(high: pl.Series, low: pl.Series, close: pl.Series, timeperiod1: int = 7, timeperiod2: int = 14, timeperiod3: int = 28) -> pl.Series: ...
@overload
def ULTOSC(high: pd.Series, low: pd.Series, close: pd.Series, timeperiod1: int = 7, timeperiod2: int = 14, timeperiod3: int = 28) -> pd.Series: ...
@overload
def ULTOSC(high: np.ndarray, low: np.ndarray, close: np.ndarray, timeperiod1: int = 7, timeperiod2: int = 14, timeperiod3: int = 28) -> np.ndarray: ...
